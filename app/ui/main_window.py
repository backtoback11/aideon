import os
from datetime import datetime
from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QMenuBar,
    QPushButton, QTextEdit, QHBoxLayout, QLabel, QSplitter, QTabWidget, QInputDialog, QMessageBox
)
from PyQt6.QtGui import QAction
from PyQt6.QtCore import QSettings, Qt

from .chat_panel import ChatPanel
from app.modules.self_improver import SelfImprover
from app.modules.improver.project_scanner import ProjectScanner
from app.modules.analyzer import CodeAnalyzer

class SelfImproverPanel(QWidget):
    """
    –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –º–æ–¥—É–ª—å —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è (SelfImprover) ‚Äî —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º + —Å—Ç–æ–ø + –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ +
    –≤–∫–ª–∞–¥–∫–∏: –∏–¥–µ–∏ AI, –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∑–∞–¥–∞—á–∏/–∑–∞–ø—Ä–æ—Å—ã.
    """
    def __init__(self, config, chat_panel=None, parent=None):
        super().__init__(parent)
        self.config = config
        self.chat_panel = chat_panel
        self.improver = SelfImprover(config, chat_panel=chat_panel)
        self.generator = None
        self.stopped = False
        self._init_ui()

        self.code_analyzer = CodeAnalyzer(config)
        self.project_scanner = ProjectScanner(root_path="app")
        self.meta_summary_cache = None

        # –î–ª—è –≤–∫–ª–∞–¥–∫–∏ AI-–∏–¥–µ–π
        self.ai_ideas = []
        # –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.history = []
        # –î–ª—è –∑–∞–¥–∞—á
        self.tasks = []

    def _init_ui(self):
        layout = QVBoxLayout(self)

        self.tabs = QTabWidget(self)

        # –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ª—É—á—à–µ–Ω–∏—è
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)
        self.log_output.setStyleSheet("background-color: #f9f9f9; font-family: monospace;")
        self.tabs.addTab(self.log_output, "–ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è")

        # –ú–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        self.meta_output = QTextEdit()
        self.meta_output.setReadOnly(True)
        self.meta_output.setStyleSheet("background-color: #eef5fa; font-family: monospace;")
        self.tabs.addTab(self.meta_output, "üìä –ú–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞")

        # AI-–∏–¥–µ–∏ (—ç–∫—Å–ø–∞–Ω—Å–∏—è)
        self.ai_ideas_output = QTextEdit()
        self.ai_ideas_output.setReadOnly(True)
        self.ai_ideas_output.setStyleSheet("background-color: #e8faef; font-family: monospace;")
        self.tabs.addTab(self.ai_ideas_output, "üí° AI-–∏–¥–µ–∏/–≠–∫—Å–ø–∞–Ω—Å–∏—è")

        # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.history_output = QTextEdit()
        self.history_output.setReadOnly(True)
        self.history_output.setStyleSheet("background-color: #f5f0e6; font-family: monospace;")
        self.tabs.addTab(self.history_output, "üïì –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        # –ó–∞–ø—Ä–æ—Å—ã/–ó–∞–¥–∞—á–∏
        self.tasks_output = QTextEdit()
        self.tasks_output.setReadOnly(True)
        self.tasks_output.setStyleSheet("background-color: #f4eaff; font-family: monospace;")
        self.tabs.addTab(self.tasks_output, "üìù –ó–∞–ø—Ä–æ—Å—ã/–ó–∞–¥–∞—á–∏")

        layout.addWidget(QLabel("ü§ñ –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ Aideon"))
        layout.addWidget(self.tabs)

        btn_row = QHBoxLayout()
        self.run_btn = QPushButton("üîß –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ")
        self.run_btn.clicked.connect(self.start_manual_improvement)
        btn_row.addWidget(self.run_btn)

        self.next_btn = QPushButton("‚û°Ô∏è –î–∞–ª–µ–µ")
        self.next_btn.setEnabled(False)
        self.next_btn.clicked.connect(self.do_next_step)
        btn_row.addWidget(self.next_btn)

        self.stop_btn = QPushButton("üõë –°—Ç–æ–ø")
        self.stop_btn.setEnabled(False)
        self.stop_btn.clicked.connect(self.stop_process)
        btn_row.addWidget(self.stop_btn)

        self.meta_btn = QPushButton("üìä –ú–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        self.meta_btn.clicked.connect(self.show_meta_summary)
        btn_row.addWidget(self.meta_btn)

        self.add_idea_btn = QPushButton("üí°+ AI-–∏–¥–µ—è (–≤—Ä—É—á–Ω—É—é)")
        self.add_idea_btn.clicked.connect(self.add_ai_idea)
        btn_row.addWidget(self.add_idea_btn)

        self.auto_idea_btn = QPushButton("ü§ñ AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é")
        self.auto_idea_btn.clicked.connect(self.generate_ai_idea)
        btn_row.addWidget(self.auto_idea_btn)

        self.add_task_btn = QPushButton("üìù+ –ó–∞–¥–∞—á–∞")
        self.add_task_btn.clicked.connect(self.add_task)
        btn_row.addWidget(self.add_task_btn)

        self.auto_task_btn = QPushButton("ü§ñ AI-–∑–∞–¥–∞—á–∞ –ø–æ —Å–∞–º–º–µ—Ä–∏")
        self.auto_task_btn.clicked.connect(self.generate_ai_task)
        btn_row.addWidget(self.auto_task_btn)

        layout.addLayout(btn_row)
        self.setLayout(layout)

    def start_manual_improvement(self):
        self.tabs.setCurrentWidget(self.log_output)
        self.log_output.append("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è...\n")
        self.generator = self.improver.run_self_improvement()
        self.stopped = False
        self.run_btn.setEnabled(False)
        self.next_btn.setEnabled(True)
        self.stop_btn.setEnabled(True)
        self.do_next_step()

    def do_next_step(self):
        if self.stopped or not self.generator:
            self.log_output.append("üõë –ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n")
            self.reset_buttons()
            return
        try:
            step = next(self.generator)
            self.log_output.append(step)
            self.history.append(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {step}")
            self.update_history_tab()
            if "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" in step or "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" in step:
                self.reset_buttons()
        except StopIteration:
            self.log_output.append("üü¢ –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n")
            self.reset_buttons()
        except ValueError:
            self.log_output.append("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —à–∞–≥–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.\n")
            self.reset_buttons()

    def stop_process(self):
        self.stopped = True
        self.next_btn.setEnabled(False)
        self.stop_btn.setEnabled(False)
        self.run_btn.setEnabled(True)
        # –ü–µ—Ä–µ–¥–∞—ë–º –≤ –º–æ–¥—É–ª—å –ø—Ä–∏–∑–Ω–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            self.improver.stop_requested = True
        except Exception:
            pass
        self.log_output.append("üõë –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n")

    def reset_buttons(self):
        self.next_btn.setEnabled(False)
        self.stop_btn.setEnabled(False)
        self.run_btn.setEnabled(True)
        self.generator = None
        self.stopped = False

    def show_meta_summary(self):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø–æ –≤—Å–µ–º .py —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞.
        """
        self.tabs.setCurrentWidget(self.meta_output)
        self.meta_output.clear()
        self.meta_output.append("üìä <b>–ú–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞:</b>\n")
        scanner = self.project_scanner
        tree = scanner.scan()
        self.meta_summary_cache = tree
        for rel_dir, files in tree.items():
            self.meta_output.append(f"\n=== üìÇ <b>{rel_dir}</b> ===")
            for f in files:
                summary = f['summary']
                if isinstance(summary, dict):
                    import pprint
                    summary_str = pprint.pformat(summary, compact=True, width=100)
                else:
                    summary_str = str(summary)
                self.meta_output.append(f"\n<b>{f['name']}</b>:\n{summary_str}\n{'-'*50}")

    def add_ai_idea(self):
        idea, ok = QInputDialog.getText(self, "–î–æ–±–∞–≤–∏—Ç—å AI-–∏–¥–µ—é", "–û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é/—Ñ–∏—á—É –¥–ª—è AI:")
        if ok and idea.strip():
            entry = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {idea.strip()}"
            self.ai_ideas.append(entry)
            self.update_ai_ideas_tab()

    def generate_ai_idea(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö summary –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ AI-–∏–¥–µ–∏.
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∏–ª–∏ –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏
        if not self.meta_summary_cache:
            self.show_meta_summary()
        prompt = (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ summary —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–Ω—É –∏–¥–µ—é –∏–ª–∏ –º–æ–¥—É–ª—å,"
            " –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∏–ª–∏—Ç, —É—Å–∫–æ—Ä–∏—Ç –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."
            "\n\n–°–ø–∏—Å–æ–∫ summary –ø–æ —Ñ–∞–π–ª–∞–º:\n"
        )
        text_summary = ""
        for rel_dir, files in (self.meta_summary_cache or {}).items():
            for f in files:
                summary = f['summary']
                summary_str = summary if isinstance(summary, str) else str(summary)
                text_summary += f"{f['name']}: {summary_str}\n"
        prompt += text_summary + "\n\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –æ–¥–Ω–∞ –∏–¥–µ—è:"
        idea = self.code_analyzer.chat(prompt, system_msg="–¢—ã ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –Ω–æ–≤—ã—Ö AI-–º–æ–¥—É–ª–µ–π.")
        entry = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {idea.strip()}"
        self.ai_ideas.append(entry)
        self.update_ai_ideas_tab()
        QMessageBox.information(self, "AI-–∏–¥–µ—è –ø–æ–ª—É—á–µ–Ω–∞", f"AI-–∏–¥–µ—è:\n{idea.strip()}")

    def update_ai_ideas_tab(self):
        self.ai_ideas_output.clear()
        self.ai_ideas_output.append("üí° <b>AI-–∏–¥–µ–∏/—ç–∫—Å–ø–∞–Ω—Å–∏—è (—Ä—É—á–Ω—ã–µ –∏ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏):</b>\n")
        for idea in self.ai_ideas:
            self.ai_ideas_output.append(f"{idea}\n{'-'*30}")

    def add_task(self):
        task, ok = QInputDialog.getText(self, "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É/–∑–∞–ø—Ä–æ—Å", "–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è AI:")
        if ok and task.strip():
            entry = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {task.strip()}"
            self.tasks.append(entry)
            self.update_tasks_tab()

    def generate_ai_task(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ/–∑–∞–¥–∞—á—É –¥–ª—è AI –Ω–∞ –æ—Å–Ω–æ–≤–µ summary.
        """
        if not self.meta_summary_cache:
            self.show_meta_summary()
        prompt = (
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ summary —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–Ω—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî "
            "—á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏–ª–∏ –≤–Ω–µ–¥—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º:"
            "\n\n–°–ø–∏—Å–æ–∫ summary –ø–æ —Ñ–∞–π–ª–∞–º:\n"
        )
        text_summary = ""
        for rel_dir, files in (self.meta_summary_cache or {}).items():
            for f in files:
                summary = f['summary']
                summary_str = summary if isinstance(summary, str) else str(summary)
                text_summary += f"{f['name']}: {summary_str}\n"
        prompt += text_summary + "\n\n–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞:"
        task = self.code_analyzer.chat(prompt, system_msg="–¢—ã ‚Äî AI-–ø—Ä–æ–¥—É–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä.")
        entry = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {task.strip()}"
        self.tasks.append(entry)
        self.update_tasks_tab()
        QMessageBox.information(self, "AI-–∑–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞", f"AI-–∑–∞–¥–∞—á–∞:\n{task.strip()}")

    def update_tasks_tab(self):
        self.tasks_output.clear()
        self.tasks_output.append("üìù <b>–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è AI/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n")
        for task in self.tasks:
            self.tasks_output.append(f"{task}\n{'-'*30}")

    def update_history_tab(self):
        self.history_output.clear()
        self.history_output.append("üïì <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π/–ª–æ–≥–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞:</b>\n")
        for entry in self.history[-100:]:
            self.history_output.append(f"{entry}\n{'-'*30}")

class MainWindow(QMainWindow):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Aideon 5.0: ChatPanel + —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è SelfImproverPanel
    """
    def __init__(self, config=None):
        super().__init__()
        self.config = config or {}

        self.setGeometry(100, 100, 1400, 850)
        self.setMinimumSize(1100, 650)
        self.setWindowTitle("Aideon 5.0")

        self._create_menu_bar()
        self._init_ui()
        self.load_settings()

    def _create_menu_bar(self):
        menubar = QMenuBar(self)
        self.setMenuBar(menubar)

        file_menu = menubar.addMenu("–§–∞–π–ª")
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

    def _init_ui(self):
        splitter = QSplitter(Qt.Orientation.Horizontal)

        self.chat_panel = ChatPanel(config=self.config, parent=self)
        self.self_improver_panel = SelfImproverPanel(
            config=self.config,
            chat_panel=self.chat_panel,
            parent=self
        )

        splitter.addWidget(self.chat_panel)
        splitter.addWidget(self.self_improver_panel)

        splitter.setStretchFactor(0, 3)
        splitter.setStretchFactor(1, 2)

        central_widget = QWidget()
        layout = QVBoxLayout(central_widget)
        layout.addWidget(splitter)
        self.setCentralWidget(central_widget)

    def load_settings(self):
        settings = QSettings("Aideon", "Aideon5.0")
        geometry = settings.value("geometry")
        if geometry:
            self.restoreGeometry(geometry)
        window_state = settings.value("windowState")
        if window_state:
            self.restoreState(window_state)

    def save_settings(self):
        settings = QSettings("Aideon", "Aideon5.0")
        settings.setValue("geometry", self.saveGeometry())
        settings.setValue("windowState", self.saveState())

    def closeEvent(self, event):
        self.save_settings()
        super().closeEvent(event)