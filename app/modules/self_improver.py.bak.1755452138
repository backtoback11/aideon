import os
from datetime import datetime

from app.core.file_manager import FileManager
from app.modules.improver.project_scanner import ProjectScanner
from app.modules.improver.file_summarizer import FileSummarizer
from app.modules.improver.meta_summarizer import MetaSummarizer  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç!
from app.modules.improver.improvement_planner import ImprovementPlanner
from app.modules.improver.patch_requester import PatchRequester
from app.modules.improver.patcher import CodePatcher
from app.modules.improver.error_debugger import ErrorDebugger
from app.modules.analyzer import CodeAnalyzer
from app.logger import log_info, log_warning, log_error

class SelfImprover:
    """
    AI-–º–æ–¥—É–ª—å —Å–∞–º–æ—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è Aideon.
    –¶–∏–∫–ª:
    - —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é ProjectScanner,
    - —Å—Ç—Ä–æ–∏—Ç –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞,
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç summary –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–∏–π,
    - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–¥,
    - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–ª–∏ –æ—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    –ú–æ–∂–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å ChatPanel –¥–ª—è –≤—ã–≤–æ–¥–∞ GPT-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.

    –†–∞—Å—à–∏—Ä–µ–Ω–æ: –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –∏ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏, —Ä–µ—à–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.
    """

    def __init__(self, config, chat_panel=None):
        self.config = config
        self.file_manager = FileManager()
        self.chatgpt = CodeAnalyzer(config)
        self.backup_path = "app/backups"
        self.diff_path = "app/patches"
        os.makedirs(self.backup_path, exist_ok=True)
        os.makedirs(self.diff_path, exist_ok=True)
        self.summarizer = FileSummarizer()
        self.meta_summarizer = MetaSummarizer()  # –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç!
        self.planner = ImprovementPlanner()
        self.requester = PatchRequester()
        self.patcher = CodePatcher(backup_dir=self.backup_path, diff_dir=self.diff_path)
        self.debugger = ErrorDebugger(self.chatgpt)
        self.chat_panel = chat_panel  # –î–ª—è –≤—ã–≤–æ–¥–∞ GPT-–∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å None)

    def run_self_improvement(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–æ–≤/—à–∞–≥–æ–≤ —Å–∞–º–æ—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è.
        """
        log_info("üß† ‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è Aideon...")
        yield "üß† ‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è Aideon..."

        scanner = ProjectScanner(root_path="app")
        structure = scanner.scan()
        any_success = False

        for rel_dir, files in structure.items():
            for file_entry in files:
                fname = file_entry["name"]
                full_path = os.path.join("app", rel_dir, fname)
                abs_path = os.path.abspath(full_path)

                old_code = self.file_manager.read_file(abs_path)
                if not old_code:
                    msg = f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª (–Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è): {full_path}"
                    log_warning(msg)
                    yield msg
                    continue

                # –®–∞–≥ 1 ‚Äî –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏
                summary = self.summarizer.summarize(full_path, old_code)
                msg = f"üìÑ –°–∞–º–º–µ—Ä–∏: {full_path}\n{summary}"
                log_info(msg)
                yield msg

                # –®–∞–≥ 2 ‚Äî –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏—è
                prompt_plan = self.planner.build_prompt(full_path, summary)
                if self.chat_panel:
                    self.chat_panel.add_gpt_request(prompt_plan)
                try:
                    raw_response = self.chatgpt.chat(prompt_plan)
                    if self.chat_panel:
                        self.chat_panel.add_gpt_response(raw_response)
                except Exception as e:
                    msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–ª–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è {full_path}: {e}"
                    log_error(msg)
                    yield msg
                    continue

                plan_data = self.planner.extract_plan(raw_response)

                if not plan_data or not plan_data.get("plan"):
                    msg = f"‚ùå GPT –Ω–µ –¥–∞–ª –≤–∞–ª–∏–¥–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è: {full_path}"
                    log_error(msg)
                    yield msg
                    continue
                msg = f"üí° –ü–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è {full_path}:\n{plan_data['plan']}"
                log_info(msg)
                yield msg

                # –®–∞–≥ 3 ‚Äî –ø–∞—Ç—á (–∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞)
                patch_prompt = self.requester.build_prompt(full_path, old_code, summary, plan_data)
                if self.chat_panel:
                    self.chat_panel.add_gpt_request(patch_prompt)
                try:
                    new_code = self.chatgpt.chat(patch_prompt)
                    if self.chat_panel:
                        self.chat_panel.add_gpt_response(new_code)
                except Exception as e:
                    msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ç—á–∞: {full_path}: {e}"
                    log_warning(msg)
                    yield msg
                    continue

                if not new_code or "–û—à–∏–±–∫–∞" in new_code:
                    msg = f"‚ö†Ô∏è –ü–∞—Ç—á –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç GPT: {full_path}"
                    log_warning(msg)
                    yield msg
                    continue

                # –®–∞–≥ 4 ‚Äî –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ª–∞–¥–∫–∞
                try:
                    self.patcher.confirm_and_apply_patch(
                        file_path=abs_path,
                        old_code=old_code,
                        new_code=new_code
                    )
                    msg = f"‚úÖ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω: {full_path}"
                    log_info(msg)
                    yield msg
                    any_success = True
                except Exception as e:
                    log_error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞: {e}")
                    fix_code = self.debugger.request_fix(
                        file_path=full_path,
                        original_code=new_code,
                        error_message=str(e)
                    )
                    if fix_code:
                        msg = f"üõ†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è: {full_path}"
                        log_info(msg)
                        yield msg
                        try:
                            self.patcher.confirm_and_apply_patch(
                                file_path=abs_path,
                                old_code=old_code,
                                new_code=fix_code
                            )
                            msg = f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {full_path}"
                            log_info(msg)
                            yield msg
                            any_success = True
                        except Exception as e2:
                            msg = f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ç–æ—Ä–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞: {e2}"
                            log_error(msg)
                            yield msg
                    else:
                        msg = f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {full_path}"
                        log_error(msg)
                        yield msg

        if not any_success:
            msg = "‚ö†Ô∏è –°–∞–º–æ—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –±—ã–ª —É–ª—É—á—à—ë–Ω."
            log_warning(msg)
            yield msg
        else:
            msg = "üß† ‚úÖ –°–∞–º–æ—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
            log_info(msg)
            yield msg

    # === AI-–º–µ—Ç–æ–¥—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π ===

    def suggest_new_features(self):
        """
        AI-–∏–¥–µ–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.
        """
        summary = self.meta_summarizer.build_meta_summary()
        prompt = (
            "–í–æ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ (meta-summary) –ø—Ä–æ–µ–∫—Ç–∞ Python:\n"
            f"{summary}\n\n"
            "–ü—Ä–µ–¥–ª–æ–∂–∏, –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏, –∫–ª–∞—Å—Å—ã –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã. "
            "–û—Ç–≤–µ—Ç ‚Äî –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–π –∏ –∫—Ä–∞—Ç–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π."
        )
        response = self.chatgpt.chat(prompt)
        if self.chat_panel:
            self.chat_panel.add_gpt_request(prompt)
            self.chat_panel.add_gpt_response(response)
        return response

    def solve_with_gpt(self, problem_description):
        """
        –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –±–∞–≥ —Å —É—á—ë—Ç–æ–º –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞.
        """
        summary = self.meta_summarizer.build_meta_summary()
        prompt = (
            "–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ (meta-summary) –ø—Ä–æ–µ–∫—Ç–∞:\n"
            f"{summary}\n\n"
            f"–ü—Ä–æ–±–ª–µ–º–∞: {problem_description}\n"
            "–ö–∞–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —ç—Ç–æ —Ä–µ—à–∏—Ç—å? –ü–µ—Ä–µ—á–∏—Å–ª–∏ —à–∞–≥–∏ –∏ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
        )
        response = self.chatgpt.chat(prompt)
        if self.chat_panel:
            self.chat_panel.add_gpt_request(prompt)
            self.chat_panel.add_gpt_response(response)
        return response

    def add_module_by_task(self, user_task):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é.
        """
        summary = self.meta_summarizer.build_meta_summary()
        prompt = (
            "–¢–µ–∫—É—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (meta-summary):\n"
            f"{summary}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:\n{user_task}\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ (–∑–∞–ø—Ä–æ—Å–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é), –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –∫–æ–¥ –º–æ–¥—É–ª—è."
        )
        response = self.chatgpt.chat(prompt)
        if self.chat_panel:
            self.chat_panel.add_gpt_request(prompt)
            self.chat_panel.add_gpt_response(response)
        return response