import ast
import re

class FileSummarizer:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ (meta-summary) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞:
    - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (—è–¥—Ä–æ/—É—Ç–∏–ª–∏—Ç–∞/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Ç.–¥.)
    - –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤, —Ñ—É–Ω–∫—Ü–∏–π, —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
    - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–≤—ã–∂–∏–º–∫–∞ —Å–º—ã—Å–ª–∞)
    - –ê–≤—Ç–æ—Ç–µ–≥–∏ (core, extension, config, etc)
    """

    def summarize(self, file_path: str, file_content: str) -> str:
        # --- 1. AST-–∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ ---
        classes, functions = self._parse_structure(file_content)
        num_lines = len(file_content.splitlines())

        # --- 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞/—Å—Ç—Ä—É–∫—Ç—É—Ä–µ ---
        tags = self._infer_tags(file_path, classes, functions)

        # --- 3. –ö—Ä–∞—Ç–∫–æ–µ summary ---
        summary_lines = [
            f"# üìÅ –ü—É—Ç—å: {file_path}",
            f"# üëÅÔ∏è –°—Ç—Ä–æ–∫: {num_lines}",
            f"# üè∑Ô∏è –¢–µ–≥–∏: {', '.join(tags) if tags else 'none'}",
            f"# üß© –ö–ª–∞—Å—Å—ã: {', '.join(classes) if classes else '‚Äî'}",
            f"# ü™ù –§—É–Ω–∫—Ü–∏–∏: {', '.join(functions) if functions else '‚Äî'}",
            "",
            "## –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            self._guess_purpose(file_path, file_content, classes, functions),
            "",
            "üîç –≠—Ç–æ summary —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        ]
        return "\n".join(summary_lines)

    def _parse_structure(self, code: str):
        """AST-–ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π."""
        classes = []
        functions = []
        try:
            tree = ast.parse(code)
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    classes.append(node.name)
                elif isinstance(node, ast.FunctionDef):
                    functions.append(node.name)
        except Exception:
            # fallback: –ø—Ä–æ—Å—Ç–µ–π—à–∏–π re-–∞–Ω–∞–ª–∏–∑
            classes = re.findall(r'^class\s+(\w+)', code, re.MULTILINE)
            functions = re.findall(r'^def\s+(\w+)', code, re.MULTILINE)
        return classes, functions

    def _infer_tags(self, file_path, classes, functions):
        """–ê–≤—Ç–æ—Ç–µ–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ."""
        tags = []
        filename = file_path.lower()
        if 'core' in filename or 'main' in filename or filename.endswith('app.py'):
            tags.append('core')
        if 'config' in filename or filename.endswith('.json') or filename.endswith('.cfg'):
            tags.append('config')
        if not classes and not functions:
            tags.append('data' if filename.endswith('.py') else 'unknown')
        if 'test' in filename or 'tests' in filename:
            tags.append('test')
        if 'utils' in filename or 'helper' in filename:
            tags.append('utils')
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ (extension, api, etc)
        return tags

    def _guess_purpose(self, file_path, file_content, classes, functions):
        """–ê–≤—Ç–æ–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è summary (–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç)."""
        path = file_path.lower()
        if 'logger' in path:
            return "–ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π, –æ—à–∏–±–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ."
        if 'scanner' in path:
            return "–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ summary."
        if 'improver' in path:
            return "–ú–æ–¥—É–ª—å –¥–ª—è —Å–∞–º–æ—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ."
        if 'file_manager' in path or 'manager' in path:
            return "–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤ –ø—Ä–æ–µ–∫—Ç–µ."
        if 'analyzer' in path:
            return "–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è AI."
        if classes and not functions:
            return f"–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã: {', '.join(classes)}."
        if functions and not classes:
            return f"–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(functions)}."
        if not classes and not functions:
            if len(file_content.strip()) < 30:
                return "–ü—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–π —Ñ–∞–π–ª."
            return "–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –±–µ–∑ —è–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π."
        return "Python-–º–æ–¥—É–ª—å –ø—Ä–æ–µ–∫—Ç–∞ Aideon. –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏."


# üëá –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–∞–º–º–µ—Ä–∏
def summarize_code(file_content: str, file_path: str = "unknown.py") -> str:
    return FileSummarizer().summarize(file_path, file_content)