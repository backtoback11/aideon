# app/modules/improver/meta_summarizer.py

import json
from app.modules.improver.project_scanner import ProjectScanner
from app.logger import log_info

class MetaSummarizer:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É:
    - –°—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç—É —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞)
    - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–≤—è–∑–∏, —Ç–µ–≥–∏, —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, –º–æ–¥—É–ª–∏ —è–¥—Ä–∞/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
    """

    def __init__(self, root_path="app"):
        self.root_path = root_path
        self.scanner = ProjectScanner(root_path=root_path)
        self.structure = {}
        self.meta_summary = {}

    def build_meta_summary(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–µ—Ä, —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å—Ç—Ä–æ–∏—Ç –æ–±–æ–±—â—ë–Ω–Ω–æ–µ summary.
        """
        log_info("[MetaSummarizer] üîé –°–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É...")
        self.structure = self.scanner.scan()
        self.meta_summary = self._build_summary_from_structure(self.structure)
        return self.meta_summary

    def _build_summary_from_structure(self, structure):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞.
        """
        all_files = []
        tags_counter = {}
        classes_counter = {}
        functions_counter = {}

        for rel_dir, files in structure.items():
            for file in files:
                summary = file.get("summary", "")
                # –ü–∞—Ä—Å–∏–º summary –¥–ª—è —Å–±–æ—Ä–∞ —Ç–µ–≥–æ–≤, –∫–ª–∞—Å—Å–æ–≤, —Ñ—É–Ω–∫—Ü–∏–π
                tags = self._extract_line(summary, "# üè∑Ô∏è –¢–µ–≥–∏:")
                classes = self._extract_line(summary, "# üß© –ö–ª–∞—Å—Å—ã:")
                functions = self._extract_line(summary, "# ü™ù –§—É–Ω–∫—Ü–∏–∏:")

                # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–≥–æ–≤/–∫–ª–∞—Å—Å–æ–≤/—Ñ—É–Ω–∫—Ü–∏–π
                for tag in (tags or "").split(","):
                    tag = tag.strip()
                    if tag:
                        tags_counter[tag] = tags_counter.get(tag, 0) + 1
                for cls in (classes or "").split(","):
                    cls = cls.strip()
                    if cls and cls != '‚Äî':
                        classes_counter[cls] = classes_counter.get(cls, 0) + 1
                for func in (functions or "").split(","):
                    func = func.strip()
                    if func and func != '‚Äî':
                        functions_counter[func] = functions_counter.get(func, 0) + 1

                all_files.append({
                    "file": f"{rel_dir}/{file['name']}".replace("./", ""),
                    "tags": tags,
                    "classes": classes,
                    "functions": functions,
                    "short_summary": self._extract_description(summary)
                })

        return {
            "files": all_files,
            "tags_summary": tags_counter,
            "classes_summary": classes_counter,
            "functions_summary": functions_counter,
            "project_description": self._auto_project_description(tags_counter, classes_counter, functions_counter)
        }

    def _extract_line(self, summary, marker):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞"""
        for line in summary.splitlines():
            if line.strip().startswith(marker):
                return line.replace(marker, "").strip()
        return ""

    def _extract_description(self, summary):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ summary"""
        started = False
        lines = []
        for line in summary.splitlines():
            if line.startswith("## –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"):
                started = True
                continue
            if started:
                if line.strip().startswith("üîç") or line.strip().startswith("# "):
                    break
                lines.append(line.strip())
        return " ".join(lines).strip()

    def _auto_project_description(self, tags_counter, classes_counter, functions_counter):
        """–ê–≤—Ç–æ–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        parts = []
        if "core" in tags_counter:
            parts.append("–í –ø—Ä–æ–µ–∫—Ç–µ –≤—ã–¥–µ–ª–µ–Ω—ã –º–æ–¥—É–ª–∏ —è–¥—Ä–∞ (core), –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã.")
        if "utils" in tags_counter:
            parts.append("–ï—Å—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã.")
        if "test" in tags_counter:
            parts.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        if "config" in tags_counter:
            parts.append("–í –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.")
        parts.append(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {sum(tags_counter.values())}. –ö–ª–∞—Å—Å–æ–≤: {len(classes_counter)}. –§—É–Ω–∫—Ü–∏–π: {len(functions_counter)}.")
        return " ".join(parts)

    def export_json(self, path="app/data/meta_summary.json"):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ summary –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∏ AI.
        """
        with open(path, "w", encoding="utf-8") as f:
            json.dump(self.meta_summary, f, ensure_ascii=False, indent=2)
        log_info(f"[MetaSummarizer] üíæ –ú–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")

# ===============================
# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ:
# if __name__ == "__main__":
#     ms = MetaSummarizer(root_path="app")
#     summary = ms.build_meta_summary()
#     ms.export_json()
#     print(json.dumps(summary, ensure_ascii=False, indent=2))