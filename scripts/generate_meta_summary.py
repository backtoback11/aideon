#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞—Å–∞–º–º–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞:
- reports/meta_summary.json ‚Äî –ø–æ–ª–Ω—ã–π JSON
- SUMMARY.md ‚Äî –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –¥–ª—è GitHub (–∏–ª–∏ stdout –ø–æ —Ñ–ª–∞–≥—É)
–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º MetaSummarizer (project_facts, render_markdown()).
"""
from __future__ import annotations

import argparse
import json
import os
import sys
from pathlib import Path
from typing import Dict, Any, List

# –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ sys.path
REPO_ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(REPO_ROOT))

from app.modules.improver.project_scanner import ProjectScanner  # noqa: E402
from app.modules.improver.meta_summarizer import MetaSummarizer  # noqa: E402


def _safe_get(d: Dict[str, Any], path: str, default=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ "a.b.c" –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
    cur = d
    for part in path.split("."):
        if not isinstance(cur, dict) or part not in cur:
            return default
        cur = cur[part]
    return cur


def _render_md_fallback(meta: Dict[str, Any]) -> str:
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ SUMMARY.md, –µ—Å–ª–∏ —É MetaSummarizer –Ω–µ—Ç render_markdown()."""
    lines: List[str] = []
    lines.append("# üìä Project Meta Summary\n")
    lines.append("–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º push.\n")

    files_count = _safe_get(meta, "stats.files_count", 0)
    lines_total = _safe_get(meta, "stats.lines_total", None)
    size_est = meta.get("project_size_estimate", "?")

    lines.append("## –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä")
    lines.append(f"- –§–∞–π–ª–æ–≤: {files_count}")
    lines.append(f"- –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: ~{size_est}")
    if isinstance(lines_total, int):
        lines.append(f"- –°—É–º–º–∞—Ä–Ω–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {lines_total}")
    lines.append("")

    # üß≠ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–µ–∫—Ç–∞ (facts)
    lines.append("## üß≠ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–µ–∫—Ç–∞")
    py_ver = _safe_get(meta, "project_facts.python_version", "?")
    os_name = _safe_get(meta, "project_facts.os", "?")
    git_commit = _safe_get(meta, "project_facts.git.commit", "?")
    git_branch = _safe_get(meta, "project_facts.git.branch", "?")
    git_dirty = _safe_get(meta, "project_facts.git.is_dirty", False)
    model_name = _safe_get(meta, "project_facts.openai.model_name", "‚Äî")
    key_source = _safe_get(meta, "project_facts.openai.key_source", "unknown")
    features = _safe_get(meta, "project_facts.features", []) or []
    packages = _safe_get(meta, "project_facts.installed_packages", []) or []

    lines.append(f"- Python: `{py_ver}`")
    lines.append(f"- OS: `{os_name}`")
    lines.append(f"- Git: –≤–µ—Ç–∫–∞ `{git_branch}`, –∫–æ–º–º–∏—Ç `{git_commit}`, dirty: `{git_dirty}`")
    lines.append(f"- OpenAI –º–æ–¥–µ–ª—å: `{model_name}`")
    lines.append(f"- –ò—Å—Ç–æ—á–Ω–∏–∫ API –∫–ª—é—á–∞: `{key_source}`")
    if features:
        lines.append(f"- –í–∫–ª—é—á—ë–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏: {', '.join(features)}")
    if packages:
        lines.append(f"- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (top {len(packages)}):")
        for p in packages:
            lines.append(f"  - `{p}`")
    lines.append("\n---\n")

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º
    lines.append("## –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–∞–ø–∫–∞–º\n")
    folders = meta.get("folders", [])
    folders_sorted = sorted(folders, key=lambda x: (x.get("path") != ".", x.get("path", "")))
    for folder in folders_sorted:
        path = folder.get("path", "")
        lines.append(f"### {path}")
        for item in folder.get("items", []):
            name = item.get("name", "unknown")
            ln = item.get("lines")
            tags = item.get("tags")
            tags_str = ", ".join(tags) if isinstance(tags, list) and tags else "‚Äî"
            if isinstance(ln, int):
                lines.append(f"- **{name}** ‚Äî {ln} —Å—Ç—Ä–æ–∫, —Ç–µ–≥–∏: {tags_str}")
            else:
                lines.append(f"- **{name}** ‚Äî —Ç–µ–≥–∏: {tags_str}")
        lines.append("")
    return "\n".join(lines).rstrip() + "\n"


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(description="Generate project meta summary (JSON + Markdown).")
    p.add_argument("--json", default="reports/meta_summary.json", help="–ü—É—Ç—å –¥–ª—è JSON (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é reports/meta_summary.json)")
    p.add_argument("--md", default="SUMMARY.md", help="–ü—É—Ç—å –¥–ª—è Markdown (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SUMMARY.md)")
    p.add_argument("--stdout", action="store_true", help="–í—ã–≤–µ—Å—Ç–∏ Markdown –≤ stdout –≤–º–µ—Å—Ç–æ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª")
    return p.parse_args()


def main() -> None:
    args = parse_args()
    os.chdir(REPO_ROOT)  # —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ CI

    # 1) –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    scanner = ProjectScanner(root_path="app")
    tree = scanner.scan()

    # 2) –°–±–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    meta = MetaSummarizer().build_meta_summary(tree)

    # 3) JSON
    json_path = Path(args.json)
    json_path.parent.mkdir(parents=True, exist_ok=True)
    with json_path.open("w", encoding="utf-8") as f:
        json.dump(meta, f, ensure_ascii=False, indent=2)

    # 4) Markdown
    #   –ï—Å–ª–∏ —É MetaSummarizer –µ—Å—Ç—å render_markdown, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë.
    md_text: str
    if hasattr(MetaSummarizer, "render_markdown"):
        try:
            md_text = MetaSummarizer().render_markdown(meta)  # type: ignore[attr-defined]
        except Exception:
            md_text = _render_md_fallback(meta)
    else:
        md_text = _render_md_fallback(meta)

    if args.stdout:
        # –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å (—É–¥–æ–±–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
        sys.stdout.write(md_text)
    else:
        md_path = Path(args.md)
        with md_path.open("w", encoding="utf-8") as f:
            f.write(md_text)

    print(f"‚úÖ Meta summary JSON: {json_path}")
    if args.stdout:
        print("‚úÖ SUMMARY.md: (stdout)")
    else:
        print(f"‚úÖ SUMMARY.md: {args.md}")


if __name__ == "__main__":
    main()